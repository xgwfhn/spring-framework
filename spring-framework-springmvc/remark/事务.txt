SPRING中PROPAGATION类的事务属性详解
PROPAGATION_REQUIRED：         支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。 
PROPAGATION_SUPPORTS：         支持当前事务，如果当前没有事务，就以非事务方式执行。 
PROPAGATION_MANDATORY：      支持当前事务，如果当前没有事务，就抛出异常。 
PROPAGATION_REQUIRES_NEW：   新建事务，如果当前存在事务，把当前事务挂起。
 PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 
PROPAGATION_NEVER：               以非事务方式执行，如果当前存在事务，则抛出异常。 
PROPAGATION_NESTED：              支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。

Spring 管理事务(传播特性、隔离级别、readonly)
http://blog.csdn.net/liuxiao723846/article/details/51817825
一、事务传播机制（Propagation ）
1、spring使用动态代理来为某个方法自动添加事务，而代理应该给哪个方法增加事务行为，是有传播机制决定的。下面看有哪些属性：
 
1）REQUIRED
默认的，加入当前正要执行的事务不在另外一个事务里，那么就起一个新的事务。
比如说，ServiceB.methodB的事务级别定义为PROPAGATION_REQUIRED,那么由于执行ServiceA.methodA的时候，ServiceA.methodA已经起了事务，这时调用ServiceB.methodB，ServiceB.methodB看到自己已经运行在ServiceA.methodA的事务内部，就不再起新的事务。而假 ServiceA.methodA运行的时候发现自己没有在事务中，他就会为自己分配一个事务。
这样，在ServiceA.methodA或者在ServiceB.methodB内的任何地方出现异常，事务都会被回滚。即使ServiceB.methodB的事务已经被提交，但是ServiceA.methodA在接下来fail要回滚，ServiceB.methodB也要回滚。
 
2）SUPPORTS
如果当前在事务中，即以事务的形式运行，如果当前不再一个事务中，那么就以非事务的形式运行。
 
3）MANDATORY
必须在一个事务中运行，如果没有就抛出异常。也就是说，他只能被一个父事务调用。否则，他就要抛出异常。
 
4）REQUIRES_NEW
这个就比较绕口了。比如我们设计ServiceA.methodA的事务级别为PROPAGATION_REQUIRED，ServiceB.methodB的事务级别为PROPAGATION_REQUIRES_NEW，那么当执行到ServiceB.methodB的时候，ServiceA.methodA所在的事务就会挂起，ServiceB.methodB会起一个新的事务，等待ServiceB.methodB的事务完成以后，他才继续执行。他与PROPAGATION_REQUIRED 的事务区别在于事务的回滚程度了。因为ServiceB.methodB是新起一个事务，那么就是存在两个不同的事务。如果ServiceB.methodB已经提交，那么ServiceA.methodA失败回滚，ServiceB.methodB是不会回滚的。如果ServiceB.methodB失败回滚，如果他抛出的异常被ServiceA.methodA捕获，ServiceA.methodA事务仍然可能提交。
 
5）NOT_SUPPORTED
当前不支持事务，以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。比如ServiceA.methodA的事务级别是PROPAGATION_REQUIRED，而ServiceB.methodB的事务级别是PROPAGATION_NOT_SUPPORTED，那么当执行到ServiceB.methodB时，ServiceA.methodA的事务挂起，而他以非事务的状态运行完，再继续ServiceA.methodA的事务。
 
6）NEVER
不能在事务中运行，如果当前存在事务，则抛出异常。假设ServiceA.methodA的事务级别是PROPAGATION_REQUIRED，而ServiceB.methodB的事务级别是PROPAGATION_NEVER ，那么ServiceA.methodA中调用ServiceB.methodB时就要抛出异常了。
 
7）NESTED
理解Nested的关键是savepoint。他与PROPAGATION_REQUIRES_NEW的区别是，PROPAGATION_REQUIRES_NEW另起一个事务，将会与他的父事务相互独立，而Nested的事务和他的父事务是相依的，他的提交是要等和他的父事务一块提交的。也就是说，如果父事务最后回滚，他也要回滚的。
而Nested事务的好处是他有一个savepoint。也就是说ServiceB.methodB失败回滚，那么ServiceA.methodA也会回滚到savepoint点上，ServiceA.methodA可以选择另外一个分支，比如ServiceC.methodC，继续执行，来尝试完成自己的事务。 但是这个事务并没有在EJB标准中定义。
 
2、配置：
[html] view plain copy 在CODE上查看代码片派生到我的代码片
<!-- 事务-->  
<beanidbeanid="transactionManager"class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
<propertynamepropertyname="dataSource" ref="dataSource" />  
</bean>  
<tx:adviceidtx:adviceid="txAdvice" transaction-manager="transactionManager">  
<tx:attributes>  
<tx:methodnametx:methodname="add*" propagation="REQUIRED"  read-only="false"/>  
<tx:methodnametx:methodname="save*" propagation="REQUIRED"read-only="false" />  
<tx:methodnametx:methodname="update*" propagation="REQUIRED"read-only="false" />  
<tx:methodnametx:methodname="delete*" propagation="REQUIRED"read-only="false"/>  
<tx:methodnametx:methodname="*" propagation="REQUIRED" /><!--read-only="true" -->  
</tx:attributes>  
</tx:advice>  
   
<aop:config>  
<aop:pointcutidaop:pointcutid="transactionPointCut" expression="execution(*cn.edu.nuc.service..*.*(..))" />  
<aop:advisoradvice-refaop:advisoradvice-ref="txAdvice" pointcut-ref="transactionPointCut"/>  
</aop:config>  

二、事务隔离级别（Isolation ）
1、这里的事务隔离级别和数据库的隔离级别是一个意思。数据库的隔离级别（MySQL）有4个：
读数据一致性及允许的并发副作用
隔离级别
读数据一致性
脏读
不可重复读
幻读
未提交读（Read uncommitted）
最低级别，只能保证不读取物理上损坏的数据，事务可以看到其他事务没有被提交的数据（脏数据）
是
是
是
已提交读（Read committed）
语句级，事务可以看到其他事务已经提交的数据
否
是
是
可重复读（Repeatable read）
事务级，事务中两次查询的结果相同
否
否
是
可序列化（Serializable）
最高级别，事务级。顺序执行
否
否
否
spring控制事务隔离级别，属性有：
1）DEFAULT （默认）
这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.另外四个与JDBC的隔离级别相对应。
 
2）READ_UNCOMMITTED （读未提交）
这是事务最低的隔离级别，它允许另外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。
 
3）READ_COMMITTED （读已提交）
保证一个事务修改的数据提交后才能被另外一个事务读取。另外一个事务不能读取该事务未提交的数据。这种事务隔离级别可以避免脏读出现，但是可能会出现不可重复读和幻像读。
 
4）REPEATABLE_READ （可重复读）
这种事务隔离级别可以防止脏读，不可重复读。但是可能出现幻像读。它除了保证一个事务不能读取另一个事务未提交的数据外，还保证了不可重复读
 
5）SERIALIZABLE（串行化）
这是花费最高代价但是最可靠的事务隔离级别。事务被处理为顺序执行。除了防止脏读，不可重复读外，还避免了幻像读。
 
1) "不可重复读" 是指在一个事务内，多次读同一数据。在这个事务还没有结束时，另外一个事务也访问该同一数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改，那么第一个事务两次读到的的数据可能是不一样的。这样就发生了在一个事务内两次读到的数据是不一样的，因此称为是不可重复读。例如，一个编辑人员两次读取同一文档，但在两次读取之间，作者重写了该文档。当编辑人员第二次读取文档时，文档已更改。原始读取不可重复。如果只有在作者全部完成编写后编辑人员才可以读取文档，则可以避免该问题
要避免这种情况，通常可以用 set tran isolation level repeatable read 来设置隔离级别，这样事务A 在两次读取表T中的数据时，事务B如果企图更改表T中的数据（细节到事务A读取数据）时，就会被阻塞，知道事务A提交！ 这样就保证了，事务A两次读取的数据的一致性。

2）幻觉读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，这种修改涉及到表中的全部数据行。同时，第二个事务也修改这个表中的数据，这种修改是向表中插入一行新数据。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一样。例如，一个编辑人员更改作者提交的文档，但当生产部门将其更改内容合并到该文档的主复本时，发现作者已将未编辑的新材料添加到该文档中。如果在编辑人员和生产部门完成对原始文档的处理之前，任何人都不能将新材料添加到文档中，则可以避免该问题。
还是上面的例子，事务A要两次读取表T的中数据，虽然设置 repeatable read  可以防止事务B对数据进行修改，但是事务B却可以向表T中插入新的数据。如何防止这个问题，我们可以考虑设置最高的事务隔离级别 set tran isolation level serializable。于是乎，事务B就只能乖乖的等待事务A的提交，才能想表T中插入新的数据，从而避免了幻读！

2、配置：
[html] view plain copy 在CODE上查看代码片派生到我的代码片
<!-- 事务-->  
<beanidbeanid="transactionManager"class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
<propertynamepropertyname="dataSource" ref="dataSource" />  
</bean>  
<tx:adviceidtx:adviceid="txAdvice" transaction-manager="transactionManager">  
<tx:attributes>  
<tx:methodnametx:methodname="add*" propagation="REQUIRED"isolation="DEFAULT"/>  
<tx:methodnametx:methodname="save*" propagation="REQUIRED" isolation="DEFAULT"/>  
<tx:methodnametx:methodname="update*" propagation="REQUIRED" isolation="DEFAULT" />  
<tx:method name="delete*"propagation="REQUIRED" isolation="DEFAULT"/>  
<tx:methodnametx:methodname="*" propagation="REQUIRED" /><!--read-only="true" -->  
</tx:attributes>  
</tx:advice>  
   
<aop:config>  
<aop:pointcutidaop:pointcutid="transactionPointCut" expression="execution(*cn.edu.nuc.service..*.*(..))" />  
<aop:advisoradvice-refaop:advisoradvice-ref="txAdvice" pointcut-ref="transactionPointCut"/>  
</aop:config>  

三、只读事务（readonly）
“只读事务”并不是一个强制选项，它只是一个“暗示”，提示数据库驱动程序和数据库系统，这个事务并不包含更改数据的操作，那么JDBC驱动程序和数据库就有可能根据这种情况对该事务进行一些特定的优化，比方说不安排相应的数据库锁，以减轻事务对数据库的压力，毕竟事务也是要消耗数据库的资源的。
 
[html] view plain copy 在CODE上查看代码片派生到我的代码片
<!-- 事务-->  
<beanidbeanid="transactionManager"class="org.springframework.jdbc.datasource.DataSourceTransactionManager">  
<propertynamepropertyname="dataSource" ref="dataSource" />  
</bean>  
<tx:adviceidtx:adviceid="txAdvice" transaction-manager="transactionManager">  
<tx:attributes>  
<tx:method name="add*" propagation="REQUIRED"read-only="false" rollback-for="java.lang.Exception"/>  
<tx:methodnametx:methodname="save*" propagation="REQUIRED"read-only="false" rollback-for="java.lang.Exception"/>  
<tx:methodnametx:methodname="update*" propagation="REQUIRED"read-only="false" rollback-for="java.lang.Exception"/>  
<tx:methodnametx:methodname="delete*" propagation="REQUIRED"read-only="false" rollback-for="java.lang.Exception"/>  
<tx:methodnametx:methodname="*" propagation="REQUIRED" /><!--read-only="true" -->  
</tx:attributes>  
</tx:advice>  
   
<aop:config>  
<aop:pointcutidaop:pointcutid="transactionPointCut" expression="execution(*cn.edu.nuc.service..*.*(..))" />  
<aop:advisoradvice-refaop:advisoradvice-ref="txAdvice" pointcut-ref="transactionPointCut"/>  
</aop:config> 

<aop:pointcut expression  表达式说明
http://blog.csdn.net/woshixuye/article/details/7212238
